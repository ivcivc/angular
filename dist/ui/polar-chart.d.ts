import { ElementRef, EventEmitter, NgZone, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import DxPolarChart from 'devextreme/viz/polar_chart';
import { DxComponent } from '../core/dx.component';
import { DxTemplateHost } from '../core/dx.template-host';
import { WatcherHelper } from '../core/watcher-helper';
import { IterableDifferHelper } from '../core/iterable-differ-helper';
export declare class DxPolarChartComponent extends DxComponent implements OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxPolarChart;
    rtlEnabled: any;
    export: any;
    loadingIndicator: any;
    margin: any;
    pathModified: any;
    redrawOnResize: any;
    size: any;
    theme: any;
    title: any;
    tooltip: any;
    adaptiveLayout: any;
    animation: any;
    customizeLabel: any;
    customizePoint: any;
    dataSource: any;
    legend: any;
    palette: any;
    pointSelectionMode: any;
    argumentAxis: any;
    barWidth: any;
    commonAxisSettings: any;
    commonSeriesSettings: any;
    containerBackgroundColor: any;
    dataPrepareSettings: any;
    equalBarWidth: any;
    negativesAsZeroes: any;
    resolveLabelOverlapping: any;
    series: any;
    seriesSelectionMode: any;
    seriesTemplate: any;
    useSpiderWeb: any;
    valueAxis: any;
    onDisposing: EventEmitter<any>;
    onInitialized: EventEmitter<any>;
    onOptionChanged: EventEmitter<any>;
    onDrawn: EventEmitter<any>;
    onExported: EventEmitter<any>;
    onExporting: EventEmitter<any>;
    onFileSaving: EventEmitter<any>;
    onIncidentOccurred: EventEmitter<any>;
    onDone: EventEmitter<any>;
    onPointClick: EventEmitter<any>;
    onPointHoverChanged: EventEmitter<any>;
    onPointSelectionChanged: EventEmitter<any>;
    onTooltipHidden: EventEmitter<any>;
    onTooltipShown: EventEmitter<any>;
    onArgumentAxisClick: EventEmitter<any>;
    onLegendClick: EventEmitter<any>;
    onSeriesClick: EventEmitter<any>;
    onSeriesHoverChanged: EventEmitter<any>;
    onSeriesSelectionChanged: EventEmitter<any>;
    rtlEnabledChange: EventEmitter<any>;
    exportChange: EventEmitter<any>;
    loadingIndicatorChange: EventEmitter<any>;
    marginChange: EventEmitter<any>;
    pathModifiedChange: EventEmitter<any>;
    redrawOnResizeChange: EventEmitter<any>;
    sizeChange: EventEmitter<any>;
    themeChange: EventEmitter<any>;
    titleChange: EventEmitter<any>;
    tooltipChange: EventEmitter<any>;
    adaptiveLayoutChange: EventEmitter<any>;
    animationChange: EventEmitter<any>;
    customizeLabelChange: EventEmitter<any>;
    customizePointChange: EventEmitter<any>;
    dataSourceChange: EventEmitter<any>;
    legendChange: EventEmitter<any>;
    paletteChange: EventEmitter<any>;
    pointSelectionModeChange: EventEmitter<any>;
    argumentAxisChange: EventEmitter<any>;
    barWidthChange: EventEmitter<any>;
    commonAxisSettingsChange: EventEmitter<any>;
    commonSeriesSettingsChange: EventEmitter<any>;
    containerBackgroundColorChange: EventEmitter<any>;
    dataPrepareSettingsChange: EventEmitter<any>;
    equalBarWidthChange: EventEmitter<any>;
    negativesAsZeroesChange: EventEmitter<any>;
    resolveLabelOverlappingChange: EventEmitter<any>;
    seriesChange: EventEmitter<any>;
    seriesSelectionModeChange: EventEmitter<any>;
    seriesTemplateChange: EventEmitter<any>;
    useSpiderWebChange: EventEmitter<any>;
    valueAxisChange: EventEmitter<any>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper);
    protected _createInstance(element: any, options: any): DxPolarChart;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
}
export declare class DxPolarChartModule {
}
