import { ElementRef, EventEmitter, NgZone } from '@angular/core';
import DxDateBox from 'devextreme/ui/date_box';
import { DxValidatorComponent } from './validator';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent } from '../core/dx.component';
import { DxTemplateHost } from '../core/dx.template-host';
import { WatcherHelper } from '../core/watcher-helper';
export declare class DxDateBoxComponent extends DxComponent {
    private _watcherHelper;
    instance: DxDateBox;
    validator: DxValidatorComponent;
    height: any;
    rtlEnabled: any;
    width: any;
    accessKey: any;
    activeStateEnabled: any;
    disabled: any;
    focusStateEnabled: any;
    hint: any;
    hoverStateEnabled: any;
    tabIndex: any;
    visible: any;
    isValid: any;
    name: any;
    readOnly: any;
    validationError: any;
    validationMessageMode: any;
    value: any;
    attr: any;
    placeholder: any;
    showClearButton: any;
    spellcheck: any;
    text: any;
    valueChangeEvent: any;
    maxLength: any;
    acceptCustomValue: any;
    applyValueMode: any;
    deferRendering: any;
    fieldEditEnabled: any;
    opened: any;
    adaptivityEnabled: any;
    applyButtonText: any;
    cancelButtonText: any;
    dateOutOfRangeMessage: any;
    displayFormat: any;
    format: any;
    formatString: any;
    interval: any;
    invalidDateMessage: any;
    max: any;
    maxZoomLevel: any;
    min: any;
    minZoomLevel: any;
    pickerType: any;
    type: any;
    useCalendar: any;
    useNative: any;
    onDisposing: EventEmitter<any>;
    onInitialized: EventEmitter<any>;
    onOptionChanged: EventEmitter<any>;
    onFocusIn: EventEmitter<any>;
    onFocusOut: EventEmitter<any>;
    onValueChanged: EventEmitter<any>;
    onChange: EventEmitter<any>;
    onCopy: EventEmitter<any>;
    onCut: EventEmitter<any>;
    onEnterKey: EventEmitter<any>;
    onInput: EventEmitter<any>;
    onKeyDown: EventEmitter<any>;
    onKeyPress: EventEmitter<any>;
    onKeyUp: EventEmitter<any>;
    onPaste: EventEmitter<any>;
    onClosed: EventEmitter<any>;
    onOpened: EventEmitter<any>;
    heightChange: EventEmitter<any>;
    rtlEnabledChange: EventEmitter<any>;
    widthChange: EventEmitter<any>;
    accessKeyChange: EventEmitter<any>;
    activeStateEnabledChange: EventEmitter<any>;
    disabledChange: EventEmitter<any>;
    focusStateEnabledChange: EventEmitter<any>;
    hintChange: EventEmitter<any>;
    hoverStateEnabledChange: EventEmitter<any>;
    tabIndexChange: EventEmitter<any>;
    visibleChange: EventEmitter<any>;
    isValidChange: EventEmitter<any>;
    nameChange: EventEmitter<any>;
    readOnlyChange: EventEmitter<any>;
    validationErrorChange: EventEmitter<any>;
    validationMessageModeChange: EventEmitter<any>;
    valueChange: EventEmitter<any>;
    attrChange: EventEmitter<any>;
    placeholderChange: EventEmitter<any>;
    showClearButtonChange: EventEmitter<any>;
    spellcheckChange: EventEmitter<any>;
    textChange: EventEmitter<any>;
    valueChangeEventChange: EventEmitter<any>;
    maxLengthChange: EventEmitter<any>;
    acceptCustomValueChange: EventEmitter<any>;
    applyValueModeChange: EventEmitter<any>;
    deferRenderingChange: EventEmitter<any>;
    fieldEditEnabledChange: EventEmitter<any>;
    openedChange: EventEmitter<any>;
    adaptivityEnabledChange: EventEmitter<any>;
    applyButtonTextChange: EventEmitter<any>;
    cancelButtonTextChange: EventEmitter<any>;
    dateOutOfRangeMessageChange: EventEmitter<any>;
    displayFormatChange: EventEmitter<any>;
    formatChange: EventEmitter<any>;
    formatStringChange: EventEmitter<any>;
    intervalChange: EventEmitter<any>;
    invalidDateMessageChange: EventEmitter<any>;
    maxChange: EventEmitter<any>;
    maxZoomLevelChange: EventEmitter<any>;
    minChange: EventEmitter<any>;
    minZoomLevelChange: EventEmitter<any>;
    pickerTypeChange: EventEmitter<any>;
    typeChange: EventEmitter<any>;
    useCalendarChange: EventEmitter<any>;
    useNativeChange: EventEmitter<any>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper);
    protected _createInstance(element: any, options: any): DxDateBox;
}
export declare class DxDateBoxValueAccessorDirective implements ControlValueAccessor {
    private host;
    onChange(_: any): void;
    onTouched: () => void;
    constructor(host: DxDateBoxComponent);
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
}
export declare class DxDateBoxModule {
}
