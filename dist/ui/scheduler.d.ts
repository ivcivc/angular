import { ElementRef, EventEmitter, NgZone, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import DxScheduler from 'devextreme/ui/scheduler';
import { DxComponent } from '../core/dx.component';
import { DxTemplateHost } from '../core/dx.template-host';
import { WatcherHelper } from '../core/watcher-helper';
import { IterableDifferHelper } from '../core/iterable-differ-helper';
export declare class DxSchedulerComponent extends DxComponent implements OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxScheduler;
    height: any;
    rtlEnabled: any;
    width: any;
    accessKey: any;
    disabled: any;
    focusStateEnabled: any;
    hint: any;
    tabIndex: any;
    visible: any;
    allDayExpr: any;
    appointmentTemplate: any;
    appointmentTooltipTemplate: any;
    cellDuration: any;
    crossScrollingEnabled: any;
    currentDate: any;
    currentView: any;
    dataCellTemplate: any;
    dataSource: any;
    dateCellTemplate: any;
    descriptionExpr: any;
    editing: any;
    endDateExpr: any;
    endDateTimeZoneExpr: any;
    endDayHour: any;
    firstDayOfWeek: any;
    groups: any;
    horizontalScrollingEnabled: any;
    max: any;
    min: any;
    noDataText: any;
    recurrenceEditMode: any;
    recurrenceExceptionExpr: any;
    recurrenceRuleExpr: any;
    remoteFiltering: any;
    resourceCellTemplate: any;
    resources: any;
    showAllDayPanel: any;
    startDateExpr: any;
    startDateTimeZoneExpr: any;
    startDayHour: any;
    textExpr: any;
    timeCellTemplate: any;
    timeZone: any;
    useDropDownViewSwitcher: any;
    views: any;
    onDisposing: EventEmitter<any>;
    onInitialized: EventEmitter<any>;
    onOptionChanged: EventEmitter<any>;
    onContentReady: EventEmitter<any>;
    onAppointmentAdded: EventEmitter<any>;
    onAppointmentAdding: EventEmitter<any>;
    onAppointmentClick: EventEmitter<any>;
    onAppointmentDblClick: EventEmitter<any>;
    onAppointmentDeleted: EventEmitter<any>;
    onAppointmentDeleting: EventEmitter<any>;
    onAppointmentFormCreated: EventEmitter<any>;
    onAppointmentRendered: EventEmitter<any>;
    onAppointmentUpdated: EventEmitter<any>;
    onAppointmentUpdating: EventEmitter<any>;
    onCellClick: EventEmitter<any>;
    heightChange: EventEmitter<any>;
    rtlEnabledChange: EventEmitter<any>;
    widthChange: EventEmitter<any>;
    accessKeyChange: EventEmitter<any>;
    disabledChange: EventEmitter<any>;
    focusStateEnabledChange: EventEmitter<any>;
    hintChange: EventEmitter<any>;
    tabIndexChange: EventEmitter<any>;
    visibleChange: EventEmitter<any>;
    allDayExprChange: EventEmitter<any>;
    appointmentTemplateChange: EventEmitter<any>;
    appointmentTooltipTemplateChange: EventEmitter<any>;
    cellDurationChange: EventEmitter<any>;
    crossScrollingEnabledChange: EventEmitter<any>;
    currentDateChange: EventEmitter<any>;
    currentViewChange: EventEmitter<any>;
    dataCellTemplateChange: EventEmitter<any>;
    dataSourceChange: EventEmitter<any>;
    dateCellTemplateChange: EventEmitter<any>;
    descriptionExprChange: EventEmitter<any>;
    editingChange: EventEmitter<any>;
    endDateExprChange: EventEmitter<any>;
    endDateTimeZoneExprChange: EventEmitter<any>;
    endDayHourChange: EventEmitter<any>;
    firstDayOfWeekChange: EventEmitter<any>;
    groupsChange: EventEmitter<any>;
    horizontalScrollingEnabledChange: EventEmitter<any>;
    maxChange: EventEmitter<any>;
    minChange: EventEmitter<any>;
    noDataTextChange: EventEmitter<any>;
    recurrenceEditModeChange: EventEmitter<any>;
    recurrenceExceptionExprChange: EventEmitter<any>;
    recurrenceRuleExprChange: EventEmitter<any>;
    remoteFilteringChange: EventEmitter<any>;
    resourceCellTemplateChange: EventEmitter<any>;
    resourcesChange: EventEmitter<any>;
    showAllDayPanelChange: EventEmitter<any>;
    startDateExprChange: EventEmitter<any>;
    startDateTimeZoneExprChange: EventEmitter<any>;
    startDayHourChange: EventEmitter<any>;
    textExprChange: EventEmitter<any>;
    timeCellTemplateChange: EventEmitter<any>;
    timeZoneChange: EventEmitter<any>;
    useDropDownViewSwitcherChange: EventEmitter<any>;
    viewsChange: EventEmitter<any>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper);
    protected _createInstance(element: any, options: any): DxScheduler;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
}
export declare class DxSchedulerModule {
}
