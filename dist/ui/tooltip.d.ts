import { ElementRef, EventEmitter, NgZone, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import DxTooltip from 'devextreme/ui/tooltip';
import { DxComponent } from '../core/dx.component';
import { DxTemplateHost } from '../core/dx.template-host';
import { WatcherHelper } from '../core/watcher-helper';
import { IterableDifferHelper } from '../core/iterable-differ-helper';
export declare class DxTooltipComponent extends DxComponent implements OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxTooltip;
    height: any;
    rtlEnabled: any;
    width: any;
    disabled: any;
    hint: any;
    hoverStateEnabled: any;
    visible: any;
    animation: any;
    closeOnBackButton: any;
    closeOnOutsideClick: any;
    contentTemplate: any;
    deferRendering: any;
    maxHeight: any;
    maxWidth: any;
    minHeight: any;
    minWidth: any;
    shading: any;
    shadingColor: any;
    buttons: any;
    hideEvent: any;
    position: any;
    showEvent: any;
    target: any;
    onDisposing: EventEmitter<any>;
    onInitialized: EventEmitter<any>;
    onOptionChanged: EventEmitter<any>;
    onContentReady: EventEmitter<any>;
    onHidden: EventEmitter<any>;
    onHiding: EventEmitter<any>;
    onShowing: EventEmitter<any>;
    onShown: EventEmitter<any>;
    heightChange: EventEmitter<any>;
    rtlEnabledChange: EventEmitter<any>;
    widthChange: EventEmitter<any>;
    disabledChange: EventEmitter<any>;
    hintChange: EventEmitter<any>;
    hoverStateEnabledChange: EventEmitter<any>;
    visibleChange: EventEmitter<any>;
    animationChange: EventEmitter<any>;
    closeOnBackButtonChange: EventEmitter<any>;
    closeOnOutsideClickChange: EventEmitter<any>;
    contentTemplateChange: EventEmitter<any>;
    deferRenderingChange: EventEmitter<any>;
    maxHeightChange: EventEmitter<any>;
    maxWidthChange: EventEmitter<any>;
    minHeightChange: EventEmitter<any>;
    minWidthChange: EventEmitter<any>;
    shadingChange: EventEmitter<any>;
    shadingColorChange: EventEmitter<any>;
    buttonsChange: EventEmitter<any>;
    hideEventChange: EventEmitter<any>;
    positionChange: EventEmitter<any>;
    showEventChange: EventEmitter<any>;
    targetChange: EventEmitter<any>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper);
    protected _createInstance(element: any, options: any): DxTooltip;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
}
export declare class DxTooltipModule {
}
