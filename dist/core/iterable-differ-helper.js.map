{"version":3,"sources":["core/iterable-differ-helper.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAOO,eAAe,CAAC,CAAA;AAOvB;IAKI,8BAAoB,QAAyB,EAAU,IAAuB;QAA1D,aAAQ,GAAR,QAAQ,CAAiB;QAAU,SAAI,GAAJ,IAAI,CAAmB;QAFtE,qBAAgB,GAAsC,EAAE,CAAC;IAEiB,CAAC;IAEnF,sCAAO,GAAP,UAAQ,IAAqB;QACzB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAED,oCAAK,GAAL,UAAM,IAAY,EAAE,OAAsB;QACrC,EAAE,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,CAAC,CAAC;YACnB,IAAM,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC;YACzC,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAC/B,IAAI,CAAC;wBACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;oBACpF,CAAE;oBAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnB,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YACvC,CAAC;QACL,CAAC;IACL,CAAC;IAED,sCAAO,GAAP,UAAQ,IAAY;QAChB,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAM,OAAO,GAA0B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YAC1F,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACjC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YACvD,CAAC;QACL,CAAC;IACL,CAAC;IAlCL;QAAC,iBAAU,EAAE;;4BAAA;IAoCb,2BAAC;AAAD,CAnCA,AAmCC,IAAA;AAnCY,4BAAoB,uBAmChC,CAAA","file":"iterable-differ-helper.js","sourcesContent":["import {\n    Injectable,\n    SimpleChanges,\n    IterableDiffers,\n    IterableDiffer,\n    ChangeDetectorRef,\n    DefaultIterableDiffer\n} from '@angular/core';\n\nimport {\n    DxComponentBase\n} from './dx.component';\n\n@Injectable()\nexport class IterableDifferHelper {\n\n    private _host: DxComponentBase;\n    private _propertyDiffers: { [id: string]: IterableDiffer; } = {};\n\n    constructor(private _differs: IterableDiffers, private _cdr: ChangeDetectorRef) { }\n\n    setHost(host: DxComponentBase) {\n        this._host = host;\n    }\n\n    setup(prop: string, changes: SimpleChanges) {\n         if (prop in changes) {\n            const value = changes[prop].currentValue;\n            if (value && Array.isArray(value)) {\n                if (!this._propertyDiffers[prop]) {\n                    try {\n                        this._propertyDiffers[prop] = this._differs.find(value).create(this._cdr, null);\n                    } catch (e) { }\n                }\n            } else {\n                delete this._propertyDiffers[prop];\n            }\n        }\n    }\n\n    doCheck(prop: string) {\n        if (this._propertyDiffers[prop]) {\n            const changes = <DefaultIterableDiffer>this._propertyDiffers[prop].diff(this._host[prop]);\n            if (changes && this._host.instance) {\n                this._host.instance.option(prop, this._host[prop]);\n            }\n        }\n    }\n\n}\n"]}