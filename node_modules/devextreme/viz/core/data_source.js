/**
 * DevExtreme (viz/core/data_source.js)
 * Version: 16.2.1-16294
 * Build date: Thu Oct 20 2016
 *
 * Copyright (c) 2012 - 2016 Developer Express Inc. ALL RIGHTS RESERVED
 * EULA: https://www.devexpress.com/Support/EULAs/DevExtreme.xml
 */
"use strict";
var dataSourceBaseModule = require("../../data/data_source/data_source"),
    _isArray = require("../../core/utils/common").isArray;

function createDataSource(options) {
    var ops = dataSourceBaseModule.normalizeDataSourceOptions(options);
    "paginate" in ops || (ops.paginate = false);
    return new dataSourceBaseModule.DataSource(ops)
}

function DataSource(callback) {
    this._callback = callback;
    this._items = this._dataSource = null;
    this._isShared = false
}
DataSource.prototype = {
    constructor: DataSource,
    dispose: function() {
        this._reset()
    },
    isLoaded: function() {
        return !this._dataSource || this._dataSource.isLoaded()
    },
    items: function() {
        return this._dataSource ? this._dataSource.items() : this._items
    },
    _reset: function() {
        var that = this;
        that._items = null;
        if (that._dataSource) {
            if (that._isShared) {
                that._dataSource.off("changed", that._callback);
                that._dataSource.off("loadError", that._callback)
            } else {
                that._dataSource.dispose()
            }
            that._dataSource = null;
            that._isShared = false
        }
    },
    update: function(value) {
        var that = this;
        that._reset();
        if (!value || _isArray(value)) {
            that._items = value || null;
            that._callback()
        } else {
            that._isShared = value instanceof dataSourceBaseModule.DataSource;
            that._dataSource = that._isShared ? value : createDataSource(value);
            that._dataSource.on({
                changed: that._callback,
                loadError: that._callback
            });
            if (that._dataSource.isLoaded()) {
                that._callback()
            } else {
                that._dataSource.load()
            }
        }
    }
};
exports.DataSource = DataSource;
exports.plugin = {
    name: "data_source",
    init: function() {
        var that = this;
        that._dataSource = new exports.DataSource(function() {
            that._dataSourceChangedHandler()
        })
    },
    dispose: function() {
        this._dataSource.dispose()
    },
    members: {
        _updateDataSource: function() {
            this._dataSource.update(this.option("dataSource"))
        }
    }
};
