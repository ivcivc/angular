{"version":3,"sources":["facade-generator.ts"],"names":[],"mappings":";AAEA,IAAO,EAAE,WAAW,IAAI,CAAC,CAAC;AAC1B,IAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAC9B,uBAAmB,UAAU,CAAC,CAAA;AAE9B;IAAA;QACY,cAAS,GAAG,MAAM,CAAC;IAwB/B,CAAC;IAvBG,kCAAQ,GAAR,UAAS,MAAM;QAAf,iBAsBC;QArBG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,cAAc;YAC9C,gBAAM,CAAC,mBAAmB,GAAG,cAAc,CAAC,CAAC;YAC7C,IAAI,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,EAC7C,aAAa,GAAG,EAAE,CAAC;YAEvB,YAAY,CAAC,iBAAiB,CAAC,OAAO,CAAC,UAAA,aAAa;gBAChD,gBAAM,CAAC,kBAAkB,GAAG,aAAa,CAAC,CAAC;gBAC3C,IAAI,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;gBAC1C,KAAK,CAAC,OAAO,CAAC,UAAA,QAAQ;oBAClB,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,EAC7C,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,QAAQ,CAAC,EACpE,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,EACrC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;oBAE5D,aAAa,IAAI,oBAAoB,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,GAAG,MAAM,CAAC;gBACpF,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YAEH,gBAAM,CAAC,kBAAkB,GAAG,cAAc,CAAC,CAAC;YAC5C,EAAE,CAAC,aAAa,CAAC,cAAc,EAAE,aAAa,EAAE,EAAE,QAAQ,EAAE,KAAI,CAAC,SAAS,EAAE,CAAC,CAAC;QAClF,CAAC,CAAC,CAAC;IACP,CAAC;IACL,sBAAC;AAAD,CAzBA,AAyBC,IAAA;AAzBD;iCAyBC,CAAA","file":"facade-generator.js","sourcesContent":["/// <reference path=\"../../typings/globals/node/index.d.ts\" />\n\nimport fs = require('fs');\nimport path = require('path');\nimport logger from './logger';\n\nexport default class FacadeGenerator {\n    private _encoding = 'utf8';\n    generate(config) {\n        Object.keys(config.facades).forEach(facadeFilePath => {\n            logger('Generate facade: ' + facadeFilePath);\n            let facadeConfig = config.facades[facadeFilePath],\n                resultContent = '';\n\n            facadeConfig.sourceDirectories.forEach(directoryPath => {\n                logger('List directory: ' + directoryPath);\n                let files = fs.readdirSync(directoryPath);\n                files.forEach(fileName => {\n                    let filePath = path.join(directoryPath, fileName),\n                        relativePath = path.relative(path.dirname(facadeFilePath), filePath),\n                        parsedPath = path.parse(relativePath),\n                        modulePath = path.join(parsedPath.dir, parsedPath.name);\n\n                    resultContent += 'export * from \\'./' + modulePath.replace(/\\\\/g, '/') + '\\'\\n';\n                });\n            });\n\n            logger('Write result to ' + facadeFilePath);\n            fs.writeFileSync(facadeFilePath, resultContent, { encoding: this._encoding });\n        });\n    }\n}\n"]}