{"version":3,"sources":["metadata-generator.ts"],"names":[],"mappings":";AAGA,IAAO,EAAE,WAAW,IAAI,CAAC,CAAC;AAC1B,IAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAC9B,IAAO,MAAM,WAAW,QAAQ,CAAC,CAAC;AAClC,uBAAmB,UAAU,CAAC,CAAA;AAO9B;IAAA;QACY,cAAS,GAAG,MAAM,CAAC;IAY/B,CAAC;IAXG,4BAAI,GAAJ,UAAK,QAAQ;QACT,gBAAM,CAAC,kBAAkB,GAAG,QAAQ,CAAC,CAAC;QACtC,IAAI,UAAU,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC3D,gBAAM,CAAC,YAAY,CAAC,CAAC;QACrB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAClC,CAAC;IACD,6BAAK,GAAL,UAAM,QAAQ,EAAE,IAAI;QAChB,gBAAM,CAAC,qBAAqB,GAAG,QAAQ,CAAC,CAAC;QACzC,IAAI,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAC/C,EAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,UAAU,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;IACzE,CAAC;IACL,oBAAC;AAAD,CAbA,AAaC,IAAA;AAbY,qBAAa,gBAazB,CAAA;AAED;IACI,sCAAoB,MAAqB;QAArB,WAAM,GAAN,MAAM,CAAe;QACrC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,MAAM,GAAG,IAAI,aAAa,EAAE,CAAC;QACtC,CAAC;IACL,CAAC;IACD,+CAAQ,GAAR,UAAS,MAAM;QACX,IAAI,SAAS,GAAG,OAAO,CAAC,cAAc,CAAC,EACnC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,EAC1D,eAAe,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;QAE1C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QAErC,GAAG,CAAC,CAAC,IAAI,UAAU,IAAI,eAAe,CAAC,CAAC,CAAC;YACrC,IAAI,MAAM,GAAG,eAAe,CAAC,UAAU,CAAC,CAAC;YAEzC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;gBACjB,gBAAM,CAAC,wBAAwB,GAAG,UAAU,CAAC,CAAC;gBAC9C,QAAQ,CAAC;YACb,CAAC;YAED,gBAAM,CAAC,wBAAwB,GAAG,UAAU,CAAC,CAAC;YAE9C,IAAI,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,EAClD,WAAW,GAAG,MAAM,CAAC,oBAAoB,IAAI,KAAK,EAClD,oBAAoB,GAAG,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,EAC5E,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,oBAAoB,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,EACxG,MAAM,GAAG,EAAE,EACX,YAAY,GAAG,EAAE,EACjB,UAAU,GAAG,EAAE,EACf,QAAQ,GAAG,KAAK,CAAC;YAErB,GAAG,CAAC,CAAC,IAAI,UAAU,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;gBACpC,IAAI,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;gBAExC,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;oBACjB,IAAI,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC;oBAEzE,MAAM,CAAC,IAAI,CAAC;wBACR,IAAI,EAAE,UAAU;wBAChB,SAAS,EAAE,SAAS;qBACvB,CAAC,CAAC;gBACP,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,IAAI,QAAQ,GAAQ;wBAChB,IAAI,EAAE,UAAU;wBAChB,IAAI,EAAE,KAAK;qBACd,CAAC;oBAEF,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,IAAI,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;wBACjD,QAAQ,CAAC,YAAY,GAAG,IAAI,CAAC;oBACjC,CAAC;oBAED,EAAE,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;oBAG5B,CAAC;oBACD,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBAE1B,YAAY,CAAC,IAAI,CAAC;wBACd,IAAI,EAAE,UAAU,GAAG,QAAQ;qBAC9B,CAAC,CAAC;oBAEH,EAAE,CAAC,CAAC,UAAU,KAAK,OAAO,CAAC,CAAC,CAAC;wBACzB,QAAQ,GAAG,IAAI,CAAC;oBACpB,CAAC;gBACL,CAAC;YACL,CAAC;YAED,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAE5C,IAAI,cAAc,GAAG;gBACjB,SAAS,EAAE,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC;gBACzC,UAAU,EAAE,UAAU;gBACtB,oBAAoB,EAAE,oBAAoB;gBAC1C,WAAW,EAAE,WAAW;gBACxB,QAAQ,EAAE,oBAAoB;gBAC9B,MAAM,EAAE,SAAS;gBACjB,UAAU,EAAE,UAAU;gBACtB,QAAQ,EAAE,QAAQ;gBAClB,MAAM,EAAE,aAAa,GAAG,MAAM,CAAC,MAAM;aACxC,CAAC;YAEF,gBAAM,CAAC,yBAAyB,GAAG,cAAc,CAAC,CAAC;YACnD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;QACtD,CAAC;IACL,CAAC;IACL,mCAAC;AAAD,CAtFA,AAsFC,IAAA;AAtFD;8CAsFC,CAAA","file":"metadata-generator.js","sourcesContent":["/// <reference path=\"../../typings/globals/node/index.d.ts\" />\n/// <reference path=\"../../typings/modules/mkdirp/index.d.ts\" />\n\nimport fs = require('fs');\nimport path = require('path');\nimport mkdirp = require('mkdirp');\nimport logger from './logger';\n\nexport interface IObjectStore {\n    read(name: string): Object;\n    write(name: string, data: Object): void;\n}\n\nexport class FSObjectStore implements IObjectStore {\n    private _encoding = 'utf8';\n    read(filePath) {\n        logger('Read from file: ' + filePath);\n        let dataString = fs.readFileSync(filePath, this._encoding);\n        logger('Parse data');\n        return JSON.parse(dataString);\n    }\n    write(filePath, data) {\n        logger('Write data to file ' + filePath);\n        let dataString = JSON.stringify(data, null, 4);\n        fs.writeFileSync(filePath, dataString, { encoding: this._encoding });\n    }\n}\n\nexport default class DXComponentMetadataGenerator {\n    constructor(private _store?: IObjectStore) {\n        if (!this._store) {\n            this._store = new FSObjectStore();\n        }\n    }\n    generate(config) {\n        let inflector = require('inflector-js'),\n            metadata = this._store.read(config.sourceMetadataFilePath),\n            widgetsMetadata = metadata['Widgets'];\n\n        mkdirp.sync(config.outputFolderPath);\n\n        for (let widgetName in widgetsMetadata) {\n            let widget = widgetsMetadata[widgetName];\n\n            if (!widget.Module) {\n                logger('Skipping metadata for ' + widgetName);\n                continue;\n            }\n\n            logger('Generate metadata for ' + widgetName);\n\n            let isTranscludedContent = widget.IsTranscludedContent,\n                isExtension = widget.IsExtensionComponent || false,\n                dasherizedWidgetName = inflector.dasherize(inflector.underscore(widgetName)),\n                outputFilePath = path.join(config.outputFolderPath, dasherizedWidgetName.substr('dx-'.length) + '.json'),\n                events = [],\n                changeEvents = [],\n                properties = [],\n                isEditor = false;\n\n            for (let optionName in widget.Options) {\n                let option = widget.Options[optionName];\n\n                if (option.IsEvent) {\n                    let eventName = inflector.camelize(optionName.substr('on'.length), true);\n\n                    events.push({\n                        emit: optionName,\n                        subscribe: eventName\n                    });\n                } else {\n                    let property: any = {\n                        name: optionName,\n                        type: 'any'\n                    };\n\n                    if (!!option.IsCollection || !!option.IsDataSource) {\n                        property.isCollection = true;\n                    }\n\n                    if (option.PrimitiveTypes) {\n                        // TODO specify primitive types\n                        // property.type = primitiveType;\n                    }\n                    properties.push(property);\n\n                    changeEvents.push({\n                        emit: optionName + 'Change'\n                    });\n\n                    if (optionName === 'value') {\n                        isEditor = true;\n                    }\n                }\n            }\n\n            let allEvents = events.concat(changeEvents);\n\n            let widgetMetadata = {\n                className: inflector.classify(widgetName),\n                widgetName: widgetName,\n                isTranscludedContent: isTranscludedContent,\n                isExtension: isExtension,\n                selector: dasherizedWidgetName,\n                events: allEvents,\n                properties: properties,\n                isEditor: isEditor,\n                module: 'devextreme/' + widget.Module\n            };\n\n            logger('Write metadata to file ' + outputFilePath);\n            this._store.write(outputFilePath, widgetMetadata);\n        }\n    }\n}\n"]}