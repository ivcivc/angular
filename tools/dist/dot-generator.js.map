{"version":3,"sources":["dot-generator.ts"],"names":[],"mappings":";AAIA,IAAO,EAAE,WAAW,IAAI,CAAC,CAAC;AAC1B,IAAO,IAAI,WAAW,MAAM,CAAC,CAAC;AAC9B,IAAO,MAAM,WAAW,QAAQ,CAAC,CAAC;AAClC,uBAAmB,UAAU,CAAC,CAAA;AAC9B,IAAI,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;AAEzB,GAAG,CAAC,gBAAgB,GAAG;IACrB,QAAQ,EAAK,mBAAmB;IAChC,WAAW,EAAE,oBAAoB;IACjC,MAAM,EAAO,oBAAoB;IACjC,GAAG,EAAU,oBAAoB;IACjC,MAAM,EAAO,4CAA4C;IACzD,WAAW,EAAE,gCAAgC;IAC7C,OAAO,EAAM,uEAAuE;IACpF,OAAO,EAAE,IAAI;IACb,KAAK,EAAE,KAAK;IACZ,MAAM,EAAE,IAAI;IACZ,aAAa,EAAE,KAAK;CACrB,CAAC;AAEF;IAAA;QACY,cAAS,GAAG,MAAM,CAAC;IA0B/B,CAAC;IAzBG,qCAAc,GAAd,UAAe,gBAAwB;QACnC,gBAAM,CAAC,2BAA2B,GAAG,gBAAgB,CAAC,CAAC;QACvD,IAAI,cAAc,GAAG,EAAE,CAAC,YAAY,CAAC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACvE,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;IACxC,CAAC;IACD,+BAAQ,GAAR,UAAS,MAAM;QAAf,iBAmBC;QAlBG,IAAI,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,gBAAgB,CAAC,EACvD,KAAK,CAAC;QAEV,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QAErC,gBAAM,CAAC,kBAAkB,GAAG,MAAM,CAAC,kBAAkB,CAAC,CAAC;QACvD,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;QAClD,KAAK,CAAC,OAAO,CAAC,UAAA,QAAQ;YAClB,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;YAC9D,gBAAM,CAAC,iBAAiB,GAAG,QAAQ,CAAC,CAAC;YACrC,IAAI,IAAI,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,KAAI,CAAC,SAAS,CAAC,CAAC;YACrD,gBAAM,CAAC,gBAAgB,CAAC,CAAC;YACzB,IAAI,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YACxC,IAAI,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC;YACvD,IAAI,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;YACxE,gBAAM,CAAC,kBAAkB,GAAG,cAAc,CAAC,CAAC;YAC5C,EAAE,CAAC,aAAa,CAAC,cAAc,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,KAAI,CAAC,SAAS,EAAE,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;IACP,CAAC;IACL,mBAAC;AAAD,CA3BA,AA2BC,IAAA;AA3BD;8BA2BC,CAAA","file":"dot-generator.js","sourcesContent":["/// <reference path=\"../../typings/globals/node/index.d.ts\" />\n/// <reference path=\"../../typings/globals/dot/index.d.ts\" />\n/// <reference path=\"../../typings/modules/mkdirp/index.d.ts\" />\n\nimport fs = require('fs');\nimport path = require('path');\nimport mkdirp = require('mkdirp');\nimport logger from './logger';\nlet doT = require('dot');\n\ndoT.templateSettings = {\n  evaluate:    /\\<#([\\s\\S]+?)#\\>/g,\n  interpolate: /\\<#=([\\s\\S]+?)#\\>/g,\n  encode:      /\\<#!([\\s\\S]+?)#\\>/g,\n  use:         /\\<##([\\s\\S]+?)#\\>/g,\n  define:      /\\<###\\s*([\\w\\.$]+)\\s*(\\:|=)([\\s\\S]+?)##\\>/g,\n  conditional: /\\<#\\?(\\?)?\\s*([\\s\\S]*?)\\s*#\\>/g,\n  iterate:     /\\<#~\\s*(?:#\\>|([\\s\\S]+?)\\s*\\:\\s*([\\w$]+)\\s*(?:\\:\\s*([\\w$]+))?\\s*#\\>)/g,\n  varname: 'it',\n  strip: false,\n  append: true,\n  selfcontained: false\n};\n\nexport default class DoTGenerator {\n    private _encoding = 'utf8';\n    createTemplate(templateFilePath: string) {\n        logger('Create doT template from ' + templateFilePath);\n        let templateString = fs.readFileSync(templateFilePath, this._encoding);\n        return doT.template(templateString);\n    }\n    generate(config) {\n        let template = this.createTemplate(config.templateFilePath),\n            files;\n\n        mkdirp.sync(config.outputFolderPath);\n\n        logger('List directory: ' + config.metadataFolderPath);\n        files = fs.readdirSync(config.metadataFolderPath);\n        files.forEach(fileName => {\n            let filePath = path.join(config.metadataFolderPath, fileName);\n            logger('Read data from ' + filePath);\n            let data = fs.readFileSync(filePath, this._encoding);\n            logger('Apply template');\n            let result = template(JSON.parse(data));\n            let resultFileName = path.parse(filePath).name + '.ts';\n            let resultFilePath = path.join(config.outputFolderPath, resultFileName);\n            logger('Write result to ' + resultFilePath);\n            fs.writeFileSync(resultFilePath, result, { encoding: this._encoding });\n        });\n    }\n}\n"]}